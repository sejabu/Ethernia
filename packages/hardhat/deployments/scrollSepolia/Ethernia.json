{
  "address": "0x73f1c0D8533a554DEBBe39540645F12ec1F90465",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        }
      ],
      "name": "addERC20Assets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "claimWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_renewPeriod",
          "type": "uint256"
        }
      ],
      "name": "createWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "executeWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "listBeneficiaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ethernia.Beneficiaries[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "listERC20Tokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ethernia.Erc20Data[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renewLifeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastLifeProof",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTestator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "willData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "renewPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isClaimed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xddeaee8e16d8d4bede2b794d203a06ba2965a0849b2fd97c699c83b561b05559",
  "receipt": {
    "to": null,
    "from": "0x0F697eA6fCf922a9C411b65562B8f60dfd7d882f",
    "contractAddress": "0x73f1c0D8533a554DEBBe39540645F12ec1F90465",
    "transactionIndex": 0,
    "gasUsed": "1710838",
    "logsBloom": "0x
    "blockHash": "0x7fbfa14459d0385a322aeab6eb3f2105e5b980e8d6bafd1c7daabc1d8c1d9e57",
    "transactionHash": "0xddeaee8e16d8d4bede2b794d203a06ba2965a0849b2fd97c699c83b561b05559",
    "logs": [],
    "blockNumber": 8343491,
    "cumulativeGasUsed": "1710838",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7dd81d60e453d96912cf90c1899eb282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"addERC20Assets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"claimWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_renewPeriod\",\"type\":\"uint256\"}],\"name\":\"createWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"executeWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"listBeneficiaries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Ethernia.Beneficiaries[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"listERC20Tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Ethernia.Erc20Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renewLifeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastLifeProof\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTestator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"willData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EtherniaV0000.sol\":\"Ethernia\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/EtherniaV0000.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @title EtherniaV0000 MVP\\r\\n * @author @elgallodev\\r\\n * @notice Scroll Open Hackaton - Ethernia MVP\\r\\n * \\r\\n * TO-DO List:\\r\\n    - Add Events\\r\\n    - Add Multi Will Support\\r\\n    - Add NFT support \\r\\n    - Add automatic tokens discover\\r\\n    - Add ZK Privacy Methods\\r\\n    - Add Arcana-SDK \\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Ethernia {\\r\\n    \\r\\n    struct UserInfo {\\r\\n        address wallet;\\r\\n        uint256 lastLifeProof;\\r\\n        bool isTestator;\\r\\n    }\\r\\n\\r\\n    struct Erc20Data {\\r\\n        address tokenAddress;\\r\\n        string tokenName;\\r\\n        uint256 tokenBalance;\\r\\n    }\\r\\n\\r\\n    struct Beneficiaries {\\r\\n        address beneficiary;\\r\\n        uint256 percentage;\\r\\n    }\\r\\n\\r\\n    struct WillData {\\r\\n        string name;\\r\\n        uint256 creationTime;\\r\\n        uint256 renewPeriod;\\r\\n        uint256 claimTime;\\r\\n        uint256 executionTime;\\r\\n        bool isActive;\\r\\n        bool isClaimed;\\r\\n        bool isExecuted;\\r\\n        address claimer;\\r\\n        address executor;\\r\\n        Beneficiaries[] beneficiaryList;\\r\\n        Erc20Data[] erc20Tokens;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    mapping(address => WillData) public willData;\\r\\n        \\r\\n    uint256 public claimPeriod = 3 minutes; // Set to minutes for testing, days for production\\r\\n    uint256 public executionFee = 2;\\r\\n    address public owner;\\r\\n    \\r\\n    modifier onlyUser() {\\r\\n        require(userInfo[msg.sender].wallet != address(0), \\\"Not registered\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTestator() {\\r\\n        require(userInfo[msg.sender].isTestator, \\\"Not testator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    function registerUser() external {\\r\\n        require(userInfo[msg.sender].wallet == address(0), \\\"Already registered\\\");\\r\\n        userInfo[msg.sender].wallet = msg.sender;\\r\\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\\r\\n        userInfo[msg.sender].isTestator = false;\\r\\n    }\\r\\n    \\r\\n    function createWill(string memory _name, uint256 _renewPeriod) external onlyUser {\\r\\n        require(_renewPeriod > 0, \\\"Invalid time period\\\");\\r\\n        willData[msg.sender].name = _name;\\r\\n        willData[msg.sender].creationTime = block.timestamp;\\r\\n        willData[msg.sender].renewPeriod = _renewPeriod * 1 minutes; // Set to minutes for testing, days for production\\r\\n        willData[msg.sender].isActive = true;\\r\\n        userInfo[msg.sender].isTestator = true;\\r\\n    }\\r\\n\\r\\n    function addBeneficiary(address _beneficiary, uint256 _percentage) external onlyTestator {\\r\\n        require(willData[msg.sender].beneficiaryList.length < 10, \\\"Max beneficiaries reached\\\");\\r\\n        require (_percentage > 0 && _percentage <=100, \\\"Percentage should be a value between 0-100\\\");\\r\\n\\r\\n    // CORREGIR ACUMULACION CUANDO CARGO EL MISMO USUARIO CON UN DIFERENTE PORCENTAJE, NO CAMBIA, ACUMULA\\r\\n        uint256 totalPercentage = 0;\\r\\n        for (uint256 i = 0; i < willData[msg.sender].beneficiaryList.length; i++) {\\r\\n            totalPercentage += willData[msg.sender].beneficiaryList[i].percentage;\\r\\n        }\\r\\n        require(totalPercentage + _percentage <= 100, \\\"Total percentage exceeds 100\\\");\\r\\n\\r\\n        Beneficiaries memory beneficiary;\\r\\n        beneficiary.beneficiary = _beneficiary;\\r\\n        beneficiary.percentage = _percentage; \\r\\n        willData[msg.sender].beneficiaryList.push(beneficiary);\\r\\n    }\\r\\n\\r\\n    function addERC20Assets (address _tokenAddress, string memory _tokenName) external onlyTestator {\\r\\n        require(willData[msg.sender].erc20Tokens.length < 20, \\\"Max tokens reached\\\");\\r\\n\\r\\n        // allowance must be doit in dapp token.approve(address(this), type(uint256).max)\\r\\n        require(IERC20(_tokenAddress).allowance(msg.sender, address(this)) == type(uint256).max, 'Must setup allowance first');\\r\\n        \\r\\n        Erc20Data memory erc20Data;\\r\\n        erc20Data.tokenAddress = _tokenAddress;\\r\\n        erc20Data.tokenName = _tokenName;\\r\\n        erc20Data.tokenBalance = IERC20(_tokenAddress).balanceOf(msg.sender);\\r\\n        willData[msg.sender].erc20Tokens.push(erc20Data);\\r\\n    }\\r\\n\\r\\n    function renewLifeProof () public onlyTestator {\\r\\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function claimWill (address _testatorAddress) public onlyUser {\\r\\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\\r\\n        require(willData[_testatorAddress].isClaimed == false, 'Will already claimed');\\r\\n        \\r\\n        uint256 lockPeriod;\\r\\n        lockPeriod = willData[_testatorAddress].renewPeriod + userInfo[_testatorAddress].lastLifeProof;\\r\\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\\r\\n        \\r\\n        bool isBeneficiary = false;\\r\\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\\r\\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\\r\\n            isBeneficiary = true;\\r\\n            }\\r\\n        }\\r\\n        require(isBeneficiary==true, 'You are not a beneficiary');\\r\\n        \\r\\n        willData[_testatorAddress].claimTime = block.timestamp;\\r\\n        willData[_testatorAddress].isClaimed = true;\\r\\n        willData[_testatorAddress].claimer = msg.sender;\\r\\n    }\\r\\n\\r\\n    function executeWill (address _testatorAddress) public onlyUser {\\r\\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\\r\\n        require(willData[_testatorAddress].isClaimed == true, 'Will not claimed');\\r\\n        require(willData[_testatorAddress].isExecuted == false, 'Will already executed');\\r\\n        \\r\\n        uint256 lockPeriod;\\r\\n        lockPeriod = willData[_testatorAddress].claimTime + claimPeriod;\\r\\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\\r\\n\\r\\n        bool isBeneficiary = false;\\r\\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\\r\\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\\r\\n            isBeneficiary = true;\\r\\n            }\\r\\n        }\\r\\n        require(isBeneficiary==true, 'You are not a beneficiary');\\r\\n\\r\\n        erc20Transfer(_testatorAddress);\\r\\n\\r\\n        willData[_testatorAddress].executionTime = block.timestamp;\\r\\n        willData[_testatorAddress].isExecuted = true;\\r\\n        willData[_testatorAddress].executor = msg.sender;\\r\\n\\r\\n    }\\r\\n\\r\\n    function erc20Transfer (address _testatorAddress) private {\\r\\n        WillData memory testament = willData[_testatorAddress];\\r\\n        for(uint256 i = 0; i < testament.erc20Tokens.length; i++) {\\r\\n            address tokenAddress = testament.erc20Tokens[i].tokenAddress;\\r\\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(_testatorAddress);\\r\\n            uint256 tokenTransferFee = tokenBalance * executionFee / 100;\\r\\n            require(IERC20(tokenAddress).transferFrom(_testatorAddress, address(this), tokenTransferFee), 'Fee cannot be transfer');\\r\\n            tokenBalance -= tokenTransferFee;\\r\\n            for(uint256 j = 0; j < testament.beneficiaryList.length; j++){\\r\\n                uint256 tokenTransferAmount = tokenBalance * testament.beneficiaryList[j].percentage /100;\\r\\n                require(IERC20(tokenAddress).transferFrom(_testatorAddress, testament.beneficiaryList[j].beneficiary, tokenTransferAmount), 'Token transfer fail');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function listBeneficiaries (address _testatorAddress) external view returns (Beneficiaries[] memory){\\r\\n        return willData[_testatorAddress].beneficiaryList;\\r\\n    }\\r\\n\\r\\n    function listERC20Tokens (address _testatorAddress) external view returns (Erc20Data[] memory){\\r\\n        return willData[_testatorAddress].erc20Tokens;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xb8c444c3a1e7eb76aaa9f83a3d589ce230aa2b143e8e5e12c7353707ac1f0509\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260b4600255600260035534801561001a57600080fd5b50600480546001600160a01b03191633179055611cc58061003c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637dc2cd981161008c578063994d2bae11610066578063994d2bae1461022e578063bbcdeba31461024e578063c736b69014610261578063e854d1351461026957600080fd5b80637dc2cd98146101e75780638da5cb5b146101f057806396074e701461021b57600080fd5b80634d3820eb116100c85780634d3820eb1461019757806355ae26f5146101a15780636fc26a8c146101c157806377709099146101d457600080fd5b80631959a002146100ef578063327d67ab1461015757806340e9903b14610180575b600080fd5b61012b6100fd3660046116fe565b6000602081905290815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060015b60405180910390f35b61016a6101653660046116fe565b61027c565b60405161014e9a99989796959493929190611766565b61018960035481565b60405190815260200161014e565b61019f61036c565b005b6101b46101af3660046116fe565b6103ff565b60405161014e91906117d0565b61019f6101cf3660046116fe565b610529565b61019f6101e23660046118ff565b6107c5565b61018960025481565b600454610203906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61019f61022936600461194d565b610a1f565b61024161023c3660046116fe565b610c52565b60405161014e9190611977565b61019f61025c3660046119cf565b610cd5565b61019f610dce565b61019f6102773660046116fe565b610e18565b60016020526000908152604090208054819061029790611a14565b80601f01602080910402602001604051908101604052809291908181526020018280546102c390611a14565b80156103105780601f106102e557610100808354040283529160200191610310565b820191906000526020600020905b8154815290600101906020018083116102f357829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b036301000000909104811691168a565b336000908152602081905260409020546001600160a01b0316156103cc5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b33600081815260208190526040902080546001600160a01b0319169091178155426001820155600201805460ff19169055565b6001600160a01b0381166000908152600160209081526040808320600801805482518185028101850190935280835260609492939192909184015b8282101561051e57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161048390611a14565b80601f01602080910402602001604051908101604052809291908181526020018280546104af90611a14565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b505050505081526020016002820154815250508152602001906001019061043a565b505050509050919050565b336000908152602081905260409020546001600160a01b031661055e5760405162461bcd60e51b81526004016103c390611a4e565b6001600160a01b03811660009081526001602081905260409091206005015460ff161515146105c15760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020526040902060050154610100900460ff16156106295760405162461bcd60e51b815260206004820152601460248201527315da5b1b08185b1c9958591e4818db185a5b595960621b60448201526064016103c3565b6001600160a01b038116600090815260208181526040808320600190810154925282206002015461065a9190611a8c565b90508042116106a75760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015610734576001600160a01b03841660009081526001602052604090206007018054339190839081106106fe576106fe611aa5565b60009182526020909120600290910201546001600160a01b03160361072257600191505b8061072c81611abb565b9150506106ab565b506001811515146107835760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b50506001600160a01b0316600090815260016020526040902042600382015560050180546301000000330262ff0100600160b81b031990911617610100179055565b3360009081526020819052604090206002015460ff166107f75760405162461bcd60e51b81526004016103c390611ad4565b3360009081526001602052604090206008015460141161084e5760405162461bcd60e51b815260206004820152601260248201527113585e081d1bdad95b9cc81c995858da195960721b60448201526064016103c3565b604051636eb1769f60e11b8152336004820152306024820152600019906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190611afa565b1461090d5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420736574757020616c6c6f77616e636520666972737400000000000060448201526064016103c3565b61093a604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038316808252602082018390526040516370a0823160e01b81523360048201526370a0823190602401602060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190611afa565b604082810191909152336000908152600160208181529282206008018054808301825590835291839020845160039093020180546001600160a01b0319166001600160a01b03909316929092178255918301518392820190610a0d9082611b61565b50604082015181600201555050505050565b3360009081526020819052604090206002015460ff16610a515760405162461bcd60e51b81526004016103c390611ad4565b33600090815260016020526040902060070154600a11610ab35760405162461bcd60e51b815260206004820152601960248201527f4d61782062656e6566696369617269657320726561636865640000000000000060448201526064016103c3565b600081118015610ac4575060648111155b610b235760405162461bcd60e51b815260206004820152602a60248201527f50657263656e746167652073686f756c6420626520612076616c75652062657460448201526907765656e20302d3130360b41b60648201526084016103c3565b6000805b33600090815260016020526040902060070154811015610b9657336000908152600160205260409020600701805482908110610b6557610b65611aa5565b90600052602060002090600202016001015482610b829190611a8c565b915080610b8e81611abb565b915050610b27565b506064610ba38383611a8c565b1115610bf15760405162461bcd60e51b815260206004820152601c60248201527f546f74616c2070657263656e746167652065786365656473203130300000000060448201526064016103c3565b506040805180820182526001600160a01b03938416815260208082019384523360009081526001808352938120600701805480860182559082529190209151600290910290910180546001600160a01b031916919094161783559051910155565b6001600160a01b0381166000908152600160209081526040808320600701805482518185028101850190935280835260609492939192909184015b8282101561051e576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610c8d565b336000908152602081905260409020546001600160a01b0316610d0a5760405162461bcd60e51b81526004016103c390611a4e565b60008111610d505760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1a5b59481c195c9a5bd9606a1b60448201526064016103c3565b336000908152600160205260409020610d698382611b61565b5033600090815260016020819052604090912042910155610d8b81603c611c21565b336000908152600160208181526040808420600280820196909655600501805460ff19908116851790915591849052909220909201805490911690911790555050565b3360009081526020819052604090206002015460ff16610e005760405162461bcd60e51b81526004016103c390611ad4565b33600090815260208190526040902042600190910155565b336000908152602081905260409020546001600160a01b0316610e4d5760405162461bcd60e51b81526004016103c390611a4e565b6001600160a01b03811660009081526001602081905260409091206005015460ff16151514610eb05760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020819052604090912060050154610100900460ff16151514610f195760405162461bcd60e51b815260206004820152601060248201526f15da5b1b081b9bdd0818db185a5b595960821b60448201526064016103c3565b6001600160a01b03811660009081526001602052604090206005015462010000900460ff1615610f835760405162461bcd60e51b815260206004820152601560248201527415da5b1b08185b1c9958591e48195e1958dd5d1959605a1b60448201526064016103c3565b6002546001600160a01b0382166000908152600160205260408120600301549091610fad91611a8c565b9050804211610ffa5760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015611087576001600160a01b038416600090815260016020526040902060070180543391908390811061105157611051611aa5565b60009182526020909120600290910201546001600160a01b03160361107557600191505b8061107f81611abb565b915050610ffe565b506001811515146110d65760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b6110df83611126565b50506001600160a01b0316600090815260016020526040902042600482015560058101805462ff000019166201000017905560060180546001600160a01b03191633179055565b6001600160a01b0381166000908152600160205260408082208151610180810190925280548290829061115890611a14565b80601f016020809104026020016040519081016040528092919081815260200182805461118490611a14565b80156111d15780601f106111a6576101008083540402835291602001916111d1565b820191906000526020600020905b8154815290600101906020018083116111b457829003601f168201915b5050509183525050600182015460208083019190915260028301546040808401919091526003840154606084015260048401546080840152600584015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b03630100000090920482169085015260068501541661012084015260078401805482518185028101850190935280835261014090940193919290919060009084015b828210156112ca576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611282565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156113db57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161134090611a14565b80601f016020809104026020016040519081016040528092919081815260200182805461136c90611a14565b80156113b95780601f1061138e576101008083540402835291602001916113b9565b820191906000526020600020905b81548152906001019060200180831161139c57829003601f168201915b50505050508152602001600282015481525050815260200190600101906112f7565b5050505081525050905060005b816101600151518110156116dd576000826101600151828151811061140f5761140f611aa5565b6020908102919091010151516040516370a0823160e01b81526001600160a01b0386811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190611afa565b9050600060646003548361149f9190611c21565b6114a99190611c38565b6040516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201839052919250908416906323b872dd906064016020604051808303816000875af1158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190611c5a565b61156b5760405162461bcd60e51b81526020600482015260166024820152752332b29031b0b73737ba103132903a3930b739b332b960511b60448201526064016103c3565b6115758183611c7c565b915060005b856101400151518110156116c6576000606487610140015183815181106115a3576115a3611aa5565b602002602001015160200151856115ba9190611c21565b6115c49190611c38565b9050846001600160a01b03166323b872dd8989610140015185815181106115ed576115ed611aa5565b6020908102919091010151516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af115801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190611c5a565b6116b35760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881d1c985b9cd9995c8819985a5b606a1b60448201526064016103c3565b50806116be81611abb565b91505061157a565b5050505080806116d590611abb565b9150506113e8565b505050565b80356001600160a01b03811681146116f957600080fd5b919050565b60006020828403121561171057600080fd5b611719826116e2565b9392505050565b6000815180845260005b818110156117465760208185018101518683018201520161172a565b506000602082860101526020601f19601f83011685010191505092915050565b600061014080835261177a8184018e611720565b602084019c909c52505060408101989098526060880196909652608087019490945291151560a0860152151560c0850152151560e08401526001600160a01b039081166101008401521661012090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561184e57888303603f19018552815180516001600160a01b031684528781015160608986018190529061183082870182611720565b928901519589019590955250948701949250908601906001016117f7565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261188357600080fd5b813567ffffffffffffffff8082111561189e5761189e61185c565b604051601f8301601f19908116603f011681019082821181831017156118c6576118c661185c565b816040528381528660208588010111156118df57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561191257600080fd5b61191b836116e2565b9150602083013567ffffffffffffffff81111561193757600080fd5b61194385828601611872565b9150509250929050565b6000806040838503121561196057600080fd5b611969836116e2565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156119c257815180516001600160a01b03168552860151868501529284019290850190600101611994565b5091979650505050505050565b600080604083850312156119e257600080fd5b823567ffffffffffffffff8111156119f957600080fd5b611a0585828601611872565b95602094909401359450505050565b600181811c90821680611a2857607f821691505b602082108103611a4857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a9f57611a9f611a76565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611acd57611acd611a76565b5060010190565b6020808252600c908201526b2737ba103a32b9ba30ba37b960a11b604082015260600190565b600060208284031215611b0c57600080fd5b5051919050565b601f8211156116dd57600081815260208120601f850160051c81016020861015611b3a5750805b601f850160051c820191505b81811015611b5957828155600101611b46565b505050505050565b815167ffffffffffffffff811115611b7b57611b7b61185c565b611b8f81611b898454611a14565b84611b13565b602080601f831160018114611bc45760008415611bac5750858301515b600019600386901b1c1916600185901b178555611b59565b600085815260208120601f198616915b82811015611bf357888601518255948401946001909101908401611bd4565b5085821015611c115787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611a9f57611a9f611a76565b600082611c5557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611c6c57600080fd5b8151801515811461171957600080fd5b81810381811115611a9f57611a9f611a7656fea2646970667358221220f946c6a1d312c4ae954ab0b146c247f82d01398fb0a10caf4268b95062f7465b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637dc2cd981161008c578063994d2bae11610066578063994d2bae1461022e578063bbcdeba31461024e578063c736b69014610261578063e854d1351461026957600080fd5b80637dc2cd98146101e75780638da5cb5b146101f057806396074e701461021b57600080fd5b80634d3820eb116100c85780634d3820eb1461019757806355ae26f5146101a15780636fc26a8c146101c157806377709099146101d457600080fd5b80631959a002146100ef578063327d67ab1461015757806340e9903b14610180575b600080fd5b61012b6100fd3660046116fe565b6000602081905290815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060015b60405180910390f35b61016a6101653660046116fe565b61027c565b60405161014e9a99989796959493929190611766565b61018960035481565b60405190815260200161014e565b61019f61036c565b005b6101b46101af3660046116fe565b6103ff565b60405161014e91906117d0565b61019f6101cf3660046116fe565b610529565b61019f6101e23660046118ff565b6107c5565b61018960025481565b600454610203906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61019f61022936600461194d565b610a1f565b61024161023c3660046116fe565b610c52565b60405161014e9190611977565b61019f61025c3660046119cf565b610cd5565b61019f610dce565b61019f6102773660046116fe565b610e18565b60016020526000908152604090208054819061029790611a14565b80601f01602080910402602001604051908101604052809291908181526020018280546102c390611a14565b80156103105780601f106102e557610100808354040283529160200191610310565b820191906000526020600020905b8154815290600101906020018083116102f357829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b036301000000909104811691168a565b336000908152602081905260409020546001600160a01b0316156103cc5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b33600081815260208190526040902080546001600160a01b0319169091178155426001820155600201805460ff19169055565b6001600160a01b0381166000908152600160209081526040808320600801805482518185028101850190935280835260609492939192909184015b8282101561051e57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161048390611a14565b80601f01602080910402602001604051908101604052809291908181526020018280546104af90611a14565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b505050505081526020016002820154815250508152602001906001019061043a565b505050509050919050565b336000908152602081905260409020546001600160a01b031661055e5760405162461bcd60e51b81526004016103c390611a4e565b6001600160a01b03811660009081526001602081905260409091206005015460ff161515146105c15760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020526040902060050154610100900460ff16156106295760405162461bcd60e51b815260206004820152601460248201527315da5b1b08185b1c9958591e4818db185a5b595960621b60448201526064016103c3565b6001600160a01b038116600090815260208181526040808320600190810154925282206002015461065a9190611a8c565b90508042116106a75760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015610734576001600160a01b03841660009081526001602052604090206007018054339190839081106106fe576106fe611aa5565b60009182526020909120600290910201546001600160a01b03160361072257600191505b8061072c81611abb565b9150506106ab565b506001811515146107835760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b50506001600160a01b0316600090815260016020526040902042600382015560050180546301000000330262ff0100600160b81b031990911617610100179055565b3360009081526020819052604090206002015460ff166107f75760405162461bcd60e51b81526004016103c390611ad4565b3360009081526001602052604090206008015460141161084e5760405162461bcd60e51b815260206004820152601260248201527113585e081d1bdad95b9cc81c995858da195960721b60448201526064016103c3565b604051636eb1769f60e11b8152336004820152306024820152600019906001600160a01b0384169063dd62ed3e90604401602060405180830381865afa15801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190611afa565b1461090d5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420736574757020616c6c6f77616e636520666972737400000000000060448201526064016103c3565b61093a604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038316808252602082018390526040516370a0823160e01b81523360048201526370a0823190602401602060405180830381865afa158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190611afa565b604082810191909152336000908152600160208181529282206008018054808301825590835291839020845160039093020180546001600160a01b0319166001600160a01b03909316929092178255918301518392820190610a0d9082611b61565b50604082015181600201555050505050565b3360009081526020819052604090206002015460ff16610a515760405162461bcd60e51b81526004016103c390611ad4565b33600090815260016020526040902060070154600a11610ab35760405162461bcd60e51b815260206004820152601960248201527f4d61782062656e6566696369617269657320726561636865640000000000000060448201526064016103c3565b600081118015610ac4575060648111155b610b235760405162461bcd60e51b815260206004820152602a60248201527f50657263656e746167652073686f756c6420626520612076616c75652062657460448201526907765656e20302d3130360b41b60648201526084016103c3565b6000805b33600090815260016020526040902060070154811015610b9657336000908152600160205260409020600701805482908110610b6557610b65611aa5565b90600052602060002090600202016001015482610b829190611a8c565b915080610b8e81611abb565b915050610b27565b506064610ba38383611a8c565b1115610bf15760405162461bcd60e51b815260206004820152601c60248201527f546f74616c2070657263656e746167652065786365656473203130300000000060448201526064016103c3565b506040805180820182526001600160a01b03938416815260208082019384523360009081526001808352938120600701805480860182559082529190209151600290910290910180546001600160a01b031916919094161783559051910155565b6001600160a01b0381166000908152600160209081526040808320600701805482518185028101850190935280835260609492939192909184015b8282101561051e576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610c8d565b336000908152602081905260409020546001600160a01b0316610d0a5760405162461bcd60e51b81526004016103c390611a4e565b60008111610d505760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1a5b59481c195c9a5bd9606a1b60448201526064016103c3565b336000908152600160205260409020610d698382611b61565b5033600090815260016020819052604090912042910155610d8b81603c611c21565b336000908152600160208181526040808420600280820196909655600501805460ff19908116851790915591849052909220909201805490911690911790555050565b3360009081526020819052604090206002015460ff16610e005760405162461bcd60e51b81526004016103c390611ad4565b33600090815260208190526040902042600190910155565b336000908152602081905260409020546001600160a01b0316610e4d5760405162461bcd60e51b81526004016103c390611a4e565b6001600160a01b03811660009081526001602081905260409091206005015460ff16151514610eb05760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020819052604090912060050154610100900460ff16151514610f195760405162461bcd60e51b815260206004820152601060248201526f15da5b1b081b9bdd0818db185a5b595960821b60448201526064016103c3565b6001600160a01b03811660009081526001602052604090206005015462010000900460ff1615610f835760405162461bcd60e51b815260206004820152601560248201527415da5b1b08185b1c9958591e48195e1958dd5d1959605a1b60448201526064016103c3565b6002546001600160a01b0382166000908152600160205260408120600301549091610fad91611a8c565b9050804211610ffa5760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015611087576001600160a01b038416600090815260016020526040902060070180543391908390811061105157611051611aa5565b60009182526020909120600290910201546001600160a01b03160361107557600191505b8061107f81611abb565b915050610ffe565b506001811515146110d65760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b6110df83611126565b50506001600160a01b0316600090815260016020526040902042600482015560058101805462ff000019166201000017905560060180546001600160a01b03191633179055565b6001600160a01b0381166000908152600160205260408082208151610180810190925280548290829061115890611a14565b80601f016020809104026020016040519081016040528092919081815260200182805461118490611a14565b80156111d15780601f106111a6576101008083540402835291602001916111d1565b820191906000526020600020905b8154815290600101906020018083116111b457829003601f168201915b5050509183525050600182015460208083019190915260028301546040808401919091526003840154606084015260048401546080840152600584015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b03630100000090920482169085015260068501541661012084015260078401805482518185028101850190935280835261014090940193919290919060009084015b828210156112ca576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611282565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b828210156113db57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161134090611a14565b80601f016020809104026020016040519081016040528092919081815260200182805461136c90611a14565b80156113b95780601f1061138e576101008083540402835291602001916113b9565b820191906000526020600020905b81548152906001019060200180831161139c57829003601f168201915b50505050508152602001600282015481525050815260200190600101906112f7565b5050505081525050905060005b816101600151518110156116dd576000826101600151828151811061140f5761140f611aa5565b6020908102919091010151516040516370a0823160e01b81526001600160a01b0386811660048301529192506000918316906370a0823190602401602060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190611afa565b9050600060646003548361149f9190611c21565b6114a99190611c38565b6040516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201839052919250908416906323b872dd906064016020604051808303816000875af1158015611502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115269190611c5a565b61156b5760405162461bcd60e51b81526020600482015260166024820152752332b29031b0b73737ba103132903a3930b739b332b960511b60448201526064016103c3565b6115758183611c7c565b915060005b856101400151518110156116c6576000606487610140015183815181106115a3576115a3611aa5565b602002602001015160200151856115ba9190611c21565b6115c49190611c38565b9050846001600160a01b03166323b872dd8989610140015185815181106115ed576115ed611aa5565b6020908102919091010151516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af115801561164d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116719190611c5a565b6116b35760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881d1c985b9cd9995c8819985a5b606a1b60448201526064016103c3565b50806116be81611abb565b91505061157a565b5050505080806116d590611abb565b9150506113e8565b505050565b80356001600160a01b03811681146116f957600080fd5b919050565b60006020828403121561171057600080fd5b611719826116e2565b9392505050565b6000815180845260005b818110156117465760208185018101518683018201520161172a565b506000602082860101526020601f19601f83011685010191505092915050565b600061014080835261177a8184018e611720565b602084019c909c52505060408101989098526060880196909652608087019490945291151560a0860152151560c0850152151560e08401526001600160a01b039081166101008401521661012090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561184e57888303603f19018552815180516001600160a01b031684528781015160608986018190529061183082870182611720565b928901519589019590955250948701949250908601906001016117f7565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261188357600080fd5b813567ffffffffffffffff8082111561189e5761189e61185c565b604051601f8301601f19908116603f011681019082821181831017156118c6576118c661185c565b816040528381528660208588010111156118df57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561191257600080fd5b61191b836116e2565b9150602083013567ffffffffffffffff81111561193757600080fd5b61194385828601611872565b9150509250929050565b6000806040838503121561196057600080fd5b611969836116e2565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b828110156119c257815180516001600160a01b03168552860151868501529284019290850190600101611994565b5091979650505050505050565b600080604083850312156119e257600080fd5b823567ffffffffffffffff8111156119f957600080fd5b611a0585828601611872565b95602094909401359450505050565b600181811c90821680611a2857607f821691505b602082108103611a4857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a9f57611a9f611a76565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611acd57611acd611a76565b5060010190565b6020808252600c908201526b2737ba103a32b9ba30ba37b960a11b604082015260600190565b600060208284031215611b0c57600080fd5b5051919050565b601f8211156116dd57600081815260208120601f850160051c81016020861015611b3a5750805b601f850160051c820191505b81811015611b5957828155600101611b46565b505050505050565b815167ffffffffffffffff811115611b7b57611b7b61185c565b611b8f81611b898454611a14565b84611b13565b602080601f831160018114611bc45760008415611bac5750858301515b600019600386901b1c1916600185901b178555611b59565b600085815260208120601f198616915b82811015611bf357888601518255948401946001909101908401611bd4565b5085821015611c115787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611a9f57611a9f611a76565b600082611c5557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611c6c57600080fd5b8151801515811461171957600080fd5b81810381811115611a9f57611a9f611a7656fea2646970667358221220f946c6a1d312c4ae954ab0b146c247f82d01398fb0a10caf4268b95062f7465b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "userInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(UserInfo)87_storage)"
      },
      {
        "astId": 138,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "willData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(WillData)128_storage)"
      },
      {
        "astId": 141,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "claimPeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 144,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "executionFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 146,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Beneficiaries)99_storage)dyn_storage": {
        "base": "t_struct(Beneficiaries)99_storage",
        "encoding": "dynamic_array",
        "label": "struct Ethernia.Beneficiaries[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Erc20Data)94_storage)dyn_storage": {
        "base": "t_struct(Erc20Data)94_storage",
        "encoding": "dynamic_array",
        "label": "struct Ethernia.Erc20Data[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)87_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ethernia.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)87_storage"
      },
      "t_mapping(t_address,t_struct(WillData)128_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ethernia.WillData)",
        "numberOfBytes": "32",
        "value": "t_struct(WillData)128_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Beneficiaries)99_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.Beneficiaries",
        "members": [
          {
            "astId": 96,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 98,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Erc20Data)94_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.Erc20Data",
        "members": [
          {
            "astId": 89,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 91,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 93,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)87_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.UserInfo",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 84,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "lastLifeProof",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 86,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isTestator",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WillData)128_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.WillData",
        "members": [
          {
            "astId": 101,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 103,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "renewPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 107,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "claimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 109,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "executionTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 111,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 113,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isClaimed",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 115,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isExecuted",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 117,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "claimer",
            "offset": 3,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 119,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "executor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 123,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "beneficiaryList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Beneficiaries)99_storage)dyn_storage"
          },
          {
            "astId": 127,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "erc20Tokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Erc20Data)94_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}