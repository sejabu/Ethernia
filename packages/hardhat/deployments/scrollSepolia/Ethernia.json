{
  "address": "0x7778B67Bf4061eE74b1209159DC628939e4b5297",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        }
      ],
      "name": "addBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        }
      ],
      "name": "addERC20Assets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "claimWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_renewPeriod",
          "type": "uint256"
        }
      ],
      "name": "createWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "executeWill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "listBeneficiaries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "percentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ethernia.Beneficiaries[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_testatorAddress",
          "type": "address"
        }
      ],
      "name": "listERC20Tokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct Ethernia.Erc20Data[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renewLifeProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lastLifeProof",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTestator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "willData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "renewPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isClaimed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isExecuted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xabff2990a5356f4fe1250629492869f6d89143df1a0a7a9a32b8e8a428ff5eb8",
  "receipt": {
    "to": null,
    "from": "0x6cD4701C27f53Aad2D0c614A39317DCbFc2D4A0B",
    "contractAddress": "0x7778B67Bf4061eE74b1209159DC628939e4b5297",
    "transactionIndex": 0,
    "gasUsed": "1743393",
    "logsBloom": "0x
    "blockHash": "0x44694d3cb1cfd8549c94efd74cb5a80b42de4e62b646ac50f8f57007bad004c8",
    "transactionHash": "0xabff2990a5356f4fe1250629492869f6d89143df1a0a7a9a32b8e8a428ff5eb8",
    "logs": [],
    "blockNumber": 8527741,
    "cumulativeGasUsed": "1743393",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0e62ed86312b4aa90714a691640db39e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"addBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"addERC20Assets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"claimWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_renewPeriod\",\"type\":\"uint256\"}],\"name\":\"createWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"executeWill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"listBeneficiaries\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct Ethernia.Beneficiaries[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_testatorAddress\",\"type\":\"address\"}],\"name\":\"listERC20Tokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct Ethernia.Erc20Data[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renewLifeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastLifeProof\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTestator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"willData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"renewPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isExecuted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EtherniaV0000.sol\":\"Ethernia\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/EtherniaV0000.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @title EtherniaV0000 MVP\\r\\n * @author @elgallodev\\r\\n * @notice Scroll Open Hackaton - Ethernia MVP\\r\\n * \\r\\n * TO-DO List:\\r\\n    - Add Events\\r\\n    - Add Multi Will Support\\r\\n    - Add NFT support \\r\\n    - Add automatic tokens discover\\r\\n    - Add ZK Privacy Methods\\r\\n    - Add Arcana-SDK \\r\\n */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Ethernia {\\r\\n    \\r\\n    struct UserInfo {\\r\\n        address wallet;\\r\\n        uint256 lastLifeProof;\\r\\n        bool isTestator;\\r\\n    }\\r\\n\\r\\n    struct Erc20Data {\\r\\n        address tokenAddress;\\r\\n        string tokenName;\\r\\n        uint256 tokenBalance;\\r\\n    }\\r\\n\\r\\n    struct Beneficiaries {\\r\\n        address beneficiary;\\r\\n        uint256 percentage;\\r\\n    }\\r\\n\\r\\n    struct WillData {\\r\\n        string name;\\r\\n        uint256 creationTime;\\r\\n        uint256 renewPeriod;\\r\\n        uint256 claimTime;\\r\\n        uint256 executionTime;\\r\\n        bool isActive;\\r\\n        bool isClaimed;\\r\\n        bool isExecuted;\\r\\n        address claimer;\\r\\n        address executor;\\r\\n        Beneficiaries[] beneficiaryList;\\r\\n        Erc20Data[] erc20Tokens;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    mapping(address => WillData) public willData;\\r\\n        \\r\\n    uint256 public claimPeriod = 3 minutes; // Set to minutes for testing, days for production\\r\\n    uint256 public executionFee = 2;\\r\\n    address public owner;\\r\\n    \\r\\n    modifier onlyUser() {\\r\\n        require(userInfo[msg.sender].wallet != address(0), \\\"Not registered\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyTestator() {\\r\\n        require(userInfo[msg.sender].isTestator, \\\"Not testator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n    \\r\\n    function registerUser() external {\\r\\n        require(userInfo[msg.sender].wallet == address(0), \\\"Already registered\\\");\\r\\n        userInfo[msg.sender].wallet = msg.sender;\\r\\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\\r\\n        userInfo[msg.sender].isTestator = false;\\r\\n    }\\r\\n    \\r\\n    function createWill(string memory _name, uint256 _renewPeriod) external onlyUser {\\r\\n        require(_renewPeriod > 0, \\\"Invalid time period\\\");\\r\\n        willData[msg.sender].name = _name;\\r\\n        willData[msg.sender].creationTime = block.timestamp;\\r\\n        willData[msg.sender].renewPeriod = _renewPeriod * 1 minutes; // Set to minutes for testing, days for production\\r\\n        willData[msg.sender].isActive = true;\\r\\n        userInfo[msg.sender].isTestator = true;\\r\\n    }\\r\\n\\r\\n    function addBeneficiary(address _beneficiary, uint256 _percentage) external onlyTestator {\\r\\n        require(willData[msg.sender].beneficiaryList.length < 10, \\\"Max beneficiaries reached\\\");\\r\\n        require (_percentage > 0 && _percentage <=100, \\\"Percentage should be a value between 0-100\\\");\\r\\n\\r\\n    // CORREGIR ACUMULACION CUANDO CARGO EL MISMO USUARIO CON UN DIFERENTE PORCENTAJE, NO CAMBIA, ACUMULA\\r\\n        uint256 totalPercentage = 0;\\r\\n    bool beneficiaryExists = false;\\r\\n\\r\\n    for (uint256 i = 0; i < willData[msg.sender].beneficiaryList.length; i++) {\\r\\n        if (willData[msg.sender].beneficiaryList[i].beneficiary == _beneficiary) {\\r\\n            willData[msg.sender].beneficiaryList[i].percentage += _percentage;\\r\\n            beneficiaryExists = true;\\r\\n        }\\r\\n        totalPercentage += willData[msg.sender].beneficiaryList[i].percentage;\\r\\n    }\\r\\n\\r\\n    require(totalPercentage <= 100, \\\"Total percentage exceeds 100\\\");\\r\\n\\r\\n    if (!beneficiaryExists) {\\r\\n        Beneficiaries memory beneficiary;\\r\\n        beneficiary.beneficiary = _beneficiary;\\r\\n        beneficiary.percentage = _percentage;\\r\\n        willData[msg.sender].beneficiaryList.push(beneficiary);\\r\\n    }\\r\\n}\\r\\n    function addERC20Assets (address _tokenAddress, string memory _tokenName) external onlyTestator {\\r\\n        WillData storage will = willData[msg.sender]; //guardo en memoria la will del testador\\r\\n        // allowance must be doit in dapp token.approve(address(this), type(uint256).max)\\r\\n        require(will.erc20Tokens.length < 20, \\\"Max tokens reached\\\");\\r\\n        require(IERC20(_tokenAddress).allowance(msg.sender, address(this)) == type(uint256).max, 'Must setup allowance first');\\r\\n               \\r\\n        Erc20Data memory erc20Data;\\r\\n        erc20Data.tokenAddress = _tokenAddress;\\r\\n        erc20Data.tokenName = _tokenName;\\r\\n        erc20Data.tokenBalance = IERC20(_tokenAddress).balanceOf(msg.sender);\\r\\n        will.erc20Tokens.push(erc20Data);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function renewLifeProof () public onlyTestator {\\r\\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function claimWill (address _testatorAddress) public onlyUser {\\r\\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\\r\\n        require(willData[_testatorAddress].isClaimed == false, 'Will already claimed');\\r\\n        uint256 lockPeriod = willData[_testatorAddress].renewPeriod + userInfo[_testatorAddress].lastLifeProof;\\r\\n\\r\\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\\r\\n        \\r\\n        bool isBeneficiary = false;\\r\\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\\r\\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\\r\\n            isBeneficiary = true;\\r\\n            }\\r\\n        }\\r\\n        require(isBeneficiary==true, 'You are not a beneficiary');\\r\\n        \\r\\n        willData[_testatorAddress].claimTime = block.timestamp;\\r\\n        willData[_testatorAddress].isClaimed = true;\\r\\n        willData[_testatorAddress].claimer = msg.sender;\\r\\n    }\\r\\n\\r\\n    function executeWill (address _testatorAddress) public onlyUser {\\r\\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\\r\\n        require(willData[_testatorAddress].isClaimed == true, 'Will not claimed');\\r\\n        require(willData[_testatorAddress].isExecuted == false, 'Will already executed');\\r\\n        \\r\\n        uint256 lockPeriod = willData[_testatorAddress].claimTime + claimPeriod;\\r\\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\\r\\n\\r\\n        bool isBeneficiary = false;\\r\\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\\r\\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\\r\\n            isBeneficiary = true;\\r\\n            }\\r\\n        }\\r\\n        require(isBeneficiary==true, 'You are not a beneficiary');\\r\\n\\r\\n        erc20Transfer(_testatorAddress);\\r\\n     \\r\\n\\r\\n        willData[_testatorAddress].executionTime = block.timestamp;\\r\\n        willData[_testatorAddress].isExecuted = true;\\r\\n        willData[_testatorAddress].executor = msg.sender;\\r\\n\\r\\n    }\\r\\n    \\r\\n\\r\\n    function erc20Transfer (address _testatorAddress) private {\\r\\n        WillData memory testament = willData[_testatorAddress];\\r\\n        for(uint256 i = 0; i < testament.erc20Tokens.length; i++) {\\r\\n            address tokenAddress = testament.erc20Tokens[i].tokenAddress;\\r\\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(_testatorAddress);\\r\\n            uint256 tokenTransferFee = tokenBalance * executionFee / 100;\\r\\n            require(IERC20(tokenAddress).transferFrom(_testatorAddress, address(this), tokenTransferFee), 'Fee cannot be transfer');\\r\\n            tokenBalance -= tokenTransferFee;\\r\\n            for(uint256 j = 0; j < testament.beneficiaryList.length; j++){\\r\\n                uint256 tokenTransferAmount = tokenBalance * testament.beneficiaryList[j].percentage /100;\\r\\n                require(IERC20(tokenAddress).transferFrom(_testatorAddress, testament.beneficiaryList[j].beneficiary, tokenTransferAmount), 'Token transfer fail');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function listBeneficiaries (address _testatorAddress) external view returns (Beneficiaries[] memory){\\r\\n        return willData[_testatorAddress].beneficiaryList;\\r\\n    }\\r\\n\\r\\n    function listERC20Tokens (address _testatorAddress) external view returns (Erc20Data[] memory){\\r\\n        return willData[_testatorAddress].erc20Tokens;\\r\\n    }\\r\\n\\r\\n  \\r\\n}\",\"keccak256\":\"0x4aa70ea841265f8af0bc92aa8bcc23377b7a9c23aa9d64ddd72c6eed82c5f7df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260b4600255600260035534801561001a57600080fd5b50600480546001600160a01b03191633179055611d5c8061003c6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637dc2cd981161008c578063994d2bae11610066578063994d2bae1461022e578063bbcdeba31461024e578063c736b69014610261578063e854d1351461026957600080fd5b80637dc2cd98146101e75780638da5cb5b146101f057806396074e701461021b57600080fd5b80634d3820eb116100c85780634d3820eb1461019757806355ae26f5146101a15780636fc26a8c146101c157806377709099146101d457600080fd5b80631959a002146100ef578063327d67ab1461015757806340e9903b14610180575b600080fd5b61012b6100fd366004611795565b6000602081905290815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060015b60405180910390f35b61016a610165366004611795565b61027c565b60405161014e9a999897969594939291906117fd565b61018960035481565b60405190815260200161014e565b61019f61036c565b005b6101b46101af366004611795565b6103ff565b60405161014e9190611867565b61019f6101cf366004611795565b610529565b61019f6101e2366004611996565b6107c5565b61018960025481565b600454610203906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61019f6102293660046119e4565b610a14565b61024161023c366004611795565b610ce9565b60405161014e9190611a0e565b61019f61025c366004611a66565b610d6c565b61019f610e65565b61019f610277366004611795565b610eaf565b60016020526000908152604090208054819061029790611aab565b80601f01602080910402602001604051908101604052809291908181526020018280546102c390611aab565b80156103105780601f106102e557610100808354040283529160200191610310565b820191906000526020600020905b8154815290600101906020018083116102f357829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b036301000000909104811691168a565b336000908152602081905260409020546001600160a01b0316156103cc5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b33600081815260208190526040902080546001600160a01b0319169091178155426001820155600201805460ff19169055565b6001600160a01b0381166000908152600160209081526040808320600801805482518185028101850190935280835260609492939192909184015b8282101561051e57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161048390611aab565b80601f01602080910402602001604051908101604052809291908181526020018280546104af90611aab565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b505050505081526020016002820154815250508152602001906001019061043a565b505050509050919050565b336000908152602081905260409020546001600160a01b031661055e5760405162461bcd60e51b81526004016103c390611ae5565b6001600160a01b03811660009081526001602081905260409091206005015460ff161515146105c15760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020526040902060050154610100900460ff16156106295760405162461bcd60e51b815260206004820152601460248201527315da5b1b08185b1c9958591e4818db185a5b595960621b60448201526064016103c3565b6001600160a01b038116600090815260208181526040808320600190810154925282206002015461065a9190611b23565b90508042116106a75760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015610734576001600160a01b03841660009081526001602052604090206007018054339190839081106106fe576106fe611b3c565b60009182526020909120600290910201546001600160a01b03160361072257600191505b8061072c81611b52565b9150506106ab565b506001811515146107835760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b50506001600160a01b0316600090815260016020526040902042600382015560050180546301000000330262ff0100600160b81b031990911617610100179055565b3360009081526020819052604090206002015460ff166107f75760405162461bcd60e51b81526004016103c390611b6b565b336000908152600160205260409020600881015460141161084f5760405162461bcd60e51b815260206004820152601260248201527113585e081d1bdad95b9cc81c995858da195960721b60448201526064016103c3565b604051636eb1769f60e11b8152336004820152306024820152600019906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190611b91565b1461090e5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420736574757020616c6c6f77616e636520666972737400000000000060448201526064016103c3565b61093b604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038416808252602082018490526040516370a0823160e01b81523360048201526370a0823190602401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611b91565b6040820152600882018054600180820183556000928352602092839020845160039093020180546001600160a01b0319166001600160a01b03909316929092178255918301518392820190610a019082611bf8565b5060408201518160020155505050505050565b3360009081526020819052604090206002015460ff16610a465760405162461bcd60e51b81526004016103c390611b6b565b33600090815260016020526040902060070154600a11610aa85760405162461bcd60e51b815260206004820152601960248201527f4d61782062656e6566696369617269657320726561636865640000000000000060448201526064016103c3565b600081118015610ab9575060648111155b610b185760405162461bcd60e51b815260206004820152602a60248201527f50657263656e746167652073686f756c6420626520612076616c75652062657460448201526907765656e20302d3130360b41b60648201526084016103c3565b60008060005b33600090815260016020526040902060070154811015610c2d5733600090815260016020526040902060070180546001600160a01b038716919083908110610b6857610b68611b3c565b60009182526020909120600290910201546001600160a01b031603610bd857336000908152600160205260409020600701805485919083908110610bae57610bae611b3c565b90600052602060002090600202016001016000828254610bce9190611b23565b9091555060019250505b336000908152600160205260409020600701805482908110610bfc57610bfc611b3c565b90600052602060002090600202016001015483610c199190611b23565b925080610c2581611b52565b915050610b1e565b506064821115610c7f5760405162461bcd60e51b815260206004820152601c60248201527f546f74616c2070657263656e746167652065786365656473203130300000000060448201526064016103c3565b80610ce3576040805180820182526001600160a01b03868116825260208083018781523360009081526001808452958120600701805480880182559082529290209351600290920290930180546001600160a01b0319169190921617815590519101555b50505050565b6001600160a01b0381166000908152600160209081526040808320600701805482518185028101850190935280835260609492939192909184015b8282101561051e576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610d24565b336000908152602081905260409020546001600160a01b0316610da15760405162461bcd60e51b81526004016103c390611ae5565b60008111610de75760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1a5b59481c195c9a5bd9606a1b60448201526064016103c3565b336000908152600160205260409020610e008382611bf8565b5033600090815260016020819052604090912042910155610e2281603c611cb8565b336000908152600160208181526040808420600280820196909655600501805460ff19908116851790915591849052909220909201805490911690911790555050565b3360009081526020819052604090206002015460ff16610e975760405162461bcd60e51b81526004016103c390611b6b565b33600090815260208190526040902042600190910155565b336000908152602081905260409020546001600160a01b0316610ee45760405162461bcd60e51b81526004016103c390611ae5565b6001600160a01b03811660009081526001602081905260409091206005015460ff16151514610f475760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020819052604090912060050154610100900460ff16151514610fb05760405162461bcd60e51b815260206004820152601060248201526f15da5b1b081b9bdd0818db185a5b595960821b60448201526064016103c3565b6001600160a01b03811660009081526001602052604090206005015462010000900460ff161561101a5760405162461bcd60e51b815260206004820152601560248201527415da5b1b08185b1c9958591e48195e1958dd5d1959605a1b60448201526064016103c3565b6002546001600160a01b038216600090815260016020526040812060030154909161104491611b23565b90508042116110915760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b03841660009081526001602052604090206007015481101561111e576001600160a01b03841660009081526001602052604090206007018054339190839081106110e8576110e8611b3c565b60009182526020909120600290910201546001600160a01b03160361110c57600191505b8061111681611b52565b915050611095565b5060018115151461116d5760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b611176836111bd565b50506001600160a01b0316600090815260016020526040902042600482015560058101805462ff000019166201000017905560060180546001600160a01b03191633179055565b6001600160a01b038116600090815260016020526040808220815161018081019092528054829082906111ef90611aab565b80601f016020809104026020016040519081016040528092919081815260200182805461121b90611aab565b80156112685780601f1061123d57610100808354040283529160200191611268565b820191906000526020600020905b81548152906001019060200180831161124b57829003601f168201915b5050509183525050600182015460208083019190915260028301546040808401919091526003840154606084015260048401546080840152600584015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b03630100000090920482169085015260068501541661012084015260078401805482518185028101850190935280835261014090940193919290919060009084015b82821015611361576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611319565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561147257600084815260209081902060408051606081019091526003850290910180546001600160a01b0316825260018101805492939192918401916113d790611aab565b80601f016020809104026020016040519081016040528092919081815260200182805461140390611aab565b80156114505780601f1061142557610100808354040283529160200191611450565b820191906000526020600020905b81548152906001019060200180831161143357829003601f168201915b505050505081526020016002820154815250508152602001906001019061138e565b5050505081525050905060005b8161016001515181101561177457600082610160015182815181106114a6576114a6611b3c565b6020908102919091010151516040516370a0823160e01b81526001600160a01b0386811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190611b91565b905060006064600354836115369190611cb8565b6115409190611ccf565b6040516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201839052919250908416906323b872dd906064016020604051808303816000875af1158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190611cf1565b6116025760405162461bcd60e51b81526020600482015260166024820152752332b29031b0b73737ba103132903a3930b739b332b960511b60448201526064016103c3565b61160c8183611d13565b915060005b8561014001515181101561175d5760006064876101400151838151811061163a5761163a611b3c565b602002602001015160200151856116519190611cb8565b61165b9190611ccf565b9050846001600160a01b03166323b872dd89896101400151858151811061168457611684611b3c565b6020908102919091010151516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af11580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117089190611cf1565b61174a5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881d1c985b9cd9995c8819985a5b606a1b60448201526064016103c3565b508061175581611b52565b915050611611565b50505050808061176c90611b52565b91505061147f565b505050565b80356001600160a01b038116811461179057600080fd5b919050565b6000602082840312156117a757600080fd5b6117b082611779565b9392505050565b6000815180845260005b818110156117dd576020818501810151868301820152016117c1565b506000602082860101526020601f19601f83011685010191505092915050565b60006101408083526118118184018e6117b7565b602084019c909c52505060408101989098526060880196909652608087019490945291151560a0860152151560c0850152151560e08401526001600160a01b039081166101008401521661012090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118e557888303603f19018552815180516001600160a01b03168452878101516060898601819052906118c7828701826117b7565b9289015195890195909552509487019492509086019060010161188e565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261191a57600080fd5b813567ffffffffffffffff80821115611935576119356118f3565b604051601f8301601f19908116603f0116810190828211818310171561195d5761195d6118f3565b8160405283815286602085880101111561197657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156119a957600080fd5b6119b283611779565b9150602083013567ffffffffffffffff8111156119ce57600080fd5b6119da85828601611909565b9150509250929050565b600080604083850312156119f757600080fd5b611a0083611779565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015611a5957815180516001600160a01b03168552860151868501529284019290850190600101611a2b565b5091979650505050505050565b60008060408385031215611a7957600080fd5b823567ffffffffffffffff811115611a9057600080fd5b611a9c85828601611909565b95602094909401359450505050565b600181811c90821680611abf57607f821691505b602082108103611adf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611b3657611b36611b0d565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611b6457611b64611b0d565b5060010190565b6020808252600c908201526b2737ba103a32b9ba30ba37b960a11b604082015260600190565b600060208284031215611ba357600080fd5b5051919050565b601f82111561177457600081815260208120601f850160051c81016020861015611bd15750805b601f850160051c820191505b81811015611bf057828155600101611bdd565b505050505050565b815167ffffffffffffffff811115611c1257611c126118f3565b611c2681611c208454611aab565b84611baa565b602080601f831160018114611c5b5760008415611c435750858301515b600019600386901b1c1916600185901b178555611bf0565b600085815260208120601f198616915b82811015611c8a57888601518255948401946001909101908401611c6b565b5085821015611ca85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611b3657611b36611b0d565b600082611cec57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d0357600080fd5b815180151581146117b057600080fd5b81810381811115611b3657611b36611b0d56fea26469706673582212206ad442dd9986f407f4c4cbad1b0dca8844db022dc2257e3f51c79d5a40374f0f64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637dc2cd981161008c578063994d2bae11610066578063994d2bae1461022e578063bbcdeba31461024e578063c736b69014610261578063e854d1351461026957600080fd5b80637dc2cd98146101e75780638da5cb5b146101f057806396074e701461021b57600080fd5b80634d3820eb116100c85780634d3820eb1461019757806355ae26f5146101a15780636fc26a8c146101c157806377709099146101d457600080fd5b80631959a002146100ef578063327d67ab1461015757806340e9903b14610180575b600080fd5b61012b6100fd366004611795565b6000602081905290815260409020805460018201546002909201546001600160a01b03909116919060ff1683565b604080516001600160a01b03909416845260208401929092521515908201526060015b60405180910390f35b61016a610165366004611795565b61027c565b60405161014e9a999897969594939291906117fd565b61018960035481565b60405190815260200161014e565b61019f61036c565b005b6101b46101af366004611795565b6103ff565b60405161014e9190611867565b61019f6101cf366004611795565b610529565b61019f6101e2366004611996565b6107c5565b61018960025481565b600454610203906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b61019f6102293660046119e4565b610a14565b61024161023c366004611795565b610ce9565b60405161014e9190611a0e565b61019f61025c366004611a66565b610d6c565b61019f610e65565b61019f610277366004611795565b610eaf565b60016020526000908152604090208054819061029790611aab565b80601f01602080910402602001604051908101604052809291908181526020018280546102c390611aab565b80156103105780601f106102e557610100808354040283529160200191610310565b820191906000526020600020905b8154815290600101906020018083116102f357829003601f168201915b50505060018401546002850154600386015460048701546005880154600690980154969793969295509093509160ff808216926101008304821692620100008104909216916001600160a01b036301000000909104811691168a565b336000908152602081905260409020546001600160a01b0316156103cc5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e481c9959da5cdd195c995960721b60448201526064015b60405180910390fd5b33600081815260208190526040902080546001600160a01b0319169091178155426001820155600201805460ff19169055565b6001600160a01b0381166000908152600160209081526040808320600801805482518185028101850190935280835260609492939192909184015b8282101561051e57600084815260209081902060408051606081019091526003850290910180546001600160a01b03168252600181018054929391929184019161048390611aab565b80601f01602080910402602001604051908101604052809291908181526020018280546104af90611aab565b80156104fc5780601f106104d1576101008083540402835291602001916104fc565b820191906000526020600020905b8154815290600101906020018083116104df57829003601f168201915b505050505081526020016002820154815250508152602001906001019061043a565b505050509050919050565b336000908152602081905260409020546001600160a01b031661055e5760405162461bcd60e51b81526004016103c390611ae5565b6001600160a01b03811660009081526001602081905260409091206005015460ff161515146105c15760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020526040902060050154610100900460ff16156106295760405162461bcd60e51b815260206004820152601460248201527315da5b1b08185b1c9958591e4818db185a5b595960621b60448201526064016103c3565b6001600160a01b038116600090815260208181526040808320600190810154925282206002015461065a9190611b23565b90508042116106a75760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b038416600090815260016020526040902060070154811015610734576001600160a01b03841660009081526001602052604090206007018054339190839081106106fe576106fe611b3c565b60009182526020909120600290910201546001600160a01b03160361072257600191505b8061072c81611b52565b9150506106ab565b506001811515146107835760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b50506001600160a01b0316600090815260016020526040902042600382015560050180546301000000330262ff0100600160b81b031990911617610100179055565b3360009081526020819052604090206002015460ff166107f75760405162461bcd60e51b81526004016103c390611b6b565b336000908152600160205260409020600881015460141161084f5760405162461bcd60e51b815260206004820152601260248201527113585e081d1bdad95b9cc81c995858da195960721b60448201526064016103c3565b604051636eb1769f60e11b8152336004820152306024820152600019906001600160a01b0385169063dd62ed3e90604401602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190611b91565b1461090e5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420736574757020616c6c6f77616e636520666972737400000000000060448201526064016103c3565b61093b604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038416808252602082018490526040516370a0823160e01b81523360048201526370a0823190602401602060405180830381865afa158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190611b91565b6040820152600882018054600180820183556000928352602092839020845160039093020180546001600160a01b0319166001600160a01b03909316929092178255918301518392820190610a019082611bf8565b5060408201518160020155505050505050565b3360009081526020819052604090206002015460ff16610a465760405162461bcd60e51b81526004016103c390611b6b565b33600090815260016020526040902060070154600a11610aa85760405162461bcd60e51b815260206004820152601960248201527f4d61782062656e6566696369617269657320726561636865640000000000000060448201526064016103c3565b600081118015610ab9575060648111155b610b185760405162461bcd60e51b815260206004820152602a60248201527f50657263656e746167652073686f756c6420626520612076616c75652062657460448201526907765656e20302d3130360b41b60648201526084016103c3565b60008060005b33600090815260016020526040902060070154811015610c2d5733600090815260016020526040902060070180546001600160a01b038716919083908110610b6857610b68611b3c565b60009182526020909120600290910201546001600160a01b031603610bd857336000908152600160205260409020600701805485919083908110610bae57610bae611b3c565b90600052602060002090600202016001016000828254610bce9190611b23565b9091555060019250505b336000908152600160205260409020600701805482908110610bfc57610bfc611b3c565b90600052602060002090600202016001015483610c199190611b23565b925080610c2581611b52565b915050610b1e565b506064821115610c7f5760405162461bcd60e51b815260206004820152601c60248201527f546f74616c2070657263656e746167652065786365656473203130300000000060448201526064016103c3565b80610ce3576040805180820182526001600160a01b03868116825260208083018781523360009081526001808452958120600701805480880182559082529290209351600290920290930180546001600160a01b0319169190921617815590519101555b50505050565b6001600160a01b0381166000908152600160209081526040808320600701805482518185028101850190935280835260609492939192909184015b8282101561051e576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101610d24565b336000908152602081905260409020546001600160a01b0316610da15760405162461bcd60e51b81526004016103c390611ae5565b60008111610de75760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081d1a5b59481c195c9a5bd9606a1b60448201526064016103c3565b336000908152600160205260409020610e008382611bf8565b5033600090815260016020819052604090912042910155610e2281603c611cb8565b336000908152600160208181526040808420600280820196909655600501805460ff19908116851790915591849052909220909201805490911690911790555050565b3360009081526020819052604090206002015460ff16610e975760405162461bcd60e51b81526004016103c390611b6b565b33600090815260208190526040902042600190910155565b336000908152602081905260409020546001600160a01b0316610ee45760405162461bcd60e51b81526004016103c390611ae5565b6001600160a01b03811660009081526001602081905260409091206005015460ff16151514610f475760405162461bcd60e51b815260206004820152600f60248201526e57696c6c206e6f742061637469766560881b60448201526064016103c3565b6001600160a01b038116600090815260016020819052604090912060050154610100900460ff16151514610fb05760405162461bcd60e51b815260206004820152601060248201526f15da5b1b081b9bdd0818db185a5b595960821b60448201526064016103c3565b6001600160a01b03811660009081526001602052604090206005015462010000900460ff161561101a5760405162461bcd60e51b815260206004820152601560248201527415da5b1b08185b1c9958591e48195e1958dd5d1959605a1b60448201526064016103c3565b6002546001600160a01b038216600090815260016020526040812060030154909161104491611b23565b90508042116110915760405162461bcd60e51b81526020600482015260196024820152782637b1b5903832b934b7b21039ba34b6361030b1ba34bb329760391b60448201526064016103c3565b6000805b6001600160a01b03841660009081526001602052604090206007015481101561111e576001600160a01b03841660009081526001602052604090206007018054339190839081106110e8576110e8611b3c565b60009182526020909120600290910201546001600160a01b03160361110c57600191505b8061111681611b52565b915050611095565b5060018115151461116d5760405162461bcd60e51b8152602060048201526019602482015278596f7520617265206e6f7420612062656e656669636961727960381b60448201526064016103c3565b611176836111bd565b50506001600160a01b0316600090815260016020526040902042600482015560058101805462ff000019166201000017905560060180546001600160a01b03191633179055565b6001600160a01b038116600090815260016020526040808220815161018081019092528054829082906111ef90611aab565b80601f016020809104026020016040519081016040528092919081815260200182805461121b90611aab565b80156112685780601f1061123d57610100808354040283529160200191611268565b820191906000526020600020905b81548152906001019060200180831161124b57829003601f168201915b5050509183525050600182015460208083019190915260028301546040808401919091526003840154606084015260048401546080840152600584015460ff808216151560a08601526101008083048216151560c0870152620100008304909116151560e08601526001600160a01b03630100000090920482169085015260068501541661012084015260078401805482518185028101850190935280835261014090940193919290919060009084015b82821015611361576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611319565b50505050815260200160088201805480602002602001604051908101604052809291908181526020016000905b8282101561147257600084815260209081902060408051606081019091526003850290910180546001600160a01b0316825260018101805492939192918401916113d790611aab565b80601f016020809104026020016040519081016040528092919081815260200182805461140390611aab565b80156114505780601f1061142557610100808354040283529160200191611450565b820191906000526020600020905b81548152906001019060200180831161143357829003601f168201915b505050505081526020016002820154815250508152602001906001019061138e565b5050505081525050905060005b8161016001515181101561177457600082610160015182815181106114a6576114a6611b3c565b6020908102919091010151516040516370a0823160e01b81526001600160a01b0386811660048301529192506000918316906370a0823190602401602060405180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190611b91565b905060006064600354836115369190611cb8565b6115409190611ccf565b6040516323b872dd60e01b81526001600160a01b03888116600483015230602483015260448201839052919250908416906323b872dd906064016020604051808303816000875af1158015611599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bd9190611cf1565b6116025760405162461bcd60e51b81526020600482015260166024820152752332b29031b0b73737ba103132903a3930b739b332b960511b60448201526064016103c3565b61160c8183611d13565b915060005b8561014001515181101561175d5760006064876101400151838151811061163a5761163a611b3c565b602002602001015160200151856116519190611cb8565b61165b9190611ccf565b9050846001600160a01b03166323b872dd89896101400151858151811061168457611684611b3c565b6020908102919091010151516040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604481018490526064016020604051808303816000875af11580156116e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117089190611cf1565b61174a5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881d1c985b9cd9995c8819985a5b606a1b60448201526064016103c3565b508061175581611b52565b915050611611565b50505050808061176c90611b52565b91505061147f565b505050565b80356001600160a01b038116811461179057600080fd5b919050565b6000602082840312156117a757600080fd5b6117b082611779565b9392505050565b6000815180845260005b818110156117dd576020818501810151868301820152016117c1565b506000602082860101526020601f19601f83011685010191505092915050565b60006101408083526118118184018e6117b7565b602084019c909c52505060408101989098526060880196909652608087019490945291151560a0860152151560c0850152151560e08401526001600160a01b039081166101008401521661012090910152919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118e557888303603f19018552815180516001600160a01b03168452878101516060898601819052906118c7828701826117b7565b9289015195890195909552509487019492509086019060010161188e565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261191a57600080fd5b813567ffffffffffffffff80821115611935576119356118f3565b604051601f8301601f19908116603f0116810190828211818310171561195d5761195d6118f3565b8160405283815286602085880101111561197657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156119a957600080fd5b6119b283611779565b9150602083013567ffffffffffffffff8111156119ce57600080fd5b6119da85828601611909565b9150509250929050565b600080604083850312156119f757600080fd5b611a0083611779565b946020939093013593505050565b602080825282518282018190526000919060409081850190868401855b82811015611a5957815180516001600160a01b03168552860151868501529284019290850190600101611a2b565b5091979650505050505050565b60008060408385031215611a7957600080fd5b823567ffffffffffffffff811115611a9057600080fd5b611a9c85828601611909565b95602094909401359450505050565b600181811c90821680611abf57607f821691505b602082108103611adf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd081c9959da5cdd195c995960921b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820180821115611b3657611b36611b0d565b92915050565b634e487b7160e01b600052603260045260246000fd5b600060018201611b6457611b64611b0d565b5060010190565b6020808252600c908201526b2737ba103a32b9ba30ba37b960a11b604082015260600190565b600060208284031215611ba357600080fd5b5051919050565b601f82111561177457600081815260208120601f850160051c81016020861015611bd15750805b601f850160051c820191505b81811015611bf057828155600101611bdd565b505050505050565b815167ffffffffffffffff811115611c1257611c126118f3565b611c2681611c208454611aab565b84611baa565b602080601f831160018114611c5b5760008415611c435750858301515b600019600386901b1c1916600185901b178555611bf0565b600085815260208120601f198616915b82811015611c8a57888601518255948401946001909101908401611c6b565b5085821015611ca85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417611b3657611b36611b0d565b600082611cec57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611d0357600080fd5b815180151581146117b057600080fd5b81810381811115611b3657611b36611b0d56fea26469706673582212206ad442dd9986f407f4c4cbad1b0dca8844db022dc2257e3f51c79d5a40374f0f64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 133,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "userInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(UserInfo)87_storage)"
      },
      {
        "astId": 138,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "willData",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(WillData)128_storage)"
      },
      {
        "astId": 141,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "claimPeriod",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 144,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "executionFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 146,
        "contract": "contracts/EtherniaV0000.sol:Ethernia",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Beneficiaries)99_storage)dyn_storage": {
        "base": "t_struct(Beneficiaries)99_storage",
        "encoding": "dynamic_array",
        "label": "struct Ethernia.Beneficiaries[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Erc20Data)94_storage)dyn_storage": {
        "base": "t_struct(Erc20Data)94_storage",
        "encoding": "dynamic_array",
        "label": "struct Ethernia.Erc20Data[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)87_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ethernia.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)87_storage"
      },
      "t_mapping(t_address,t_struct(WillData)128_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Ethernia.WillData)",
        "numberOfBytes": "32",
        "value": "t_struct(WillData)128_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Beneficiaries)99_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.Beneficiaries",
        "members": [
          {
            "astId": 96,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "beneficiary",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 98,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "percentage",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Erc20Data)94_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.Erc20Data",
        "members": [
          {
            "astId": 89,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 91,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 93,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "tokenBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)87_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.UserInfo",
        "members": [
          {
            "astId": 82,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 84,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "lastLifeProof",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 86,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isTestator",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(WillData)128_storage": {
        "encoding": "inplace",
        "label": "struct Ethernia.WillData",
        "members": [
          {
            "astId": 101,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 103,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "creationTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 105,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "renewPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 107,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "claimTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 109,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "executionTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 111,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 113,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isClaimed",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 115,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "isExecuted",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 117,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "claimer",
            "offset": 3,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 119,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "executor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 123,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "beneficiaryList",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_struct(Beneficiaries)99_storage)dyn_storage"
          },
          {
            "astId": 127,
            "contract": "contracts/EtherniaV0000.sol:Ethernia",
            "label": "erc20Tokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_struct(Erc20Data)94_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}