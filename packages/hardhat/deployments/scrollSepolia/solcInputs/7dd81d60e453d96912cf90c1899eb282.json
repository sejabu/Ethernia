{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/EtherniaV0000.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @title EtherniaV0000 MVP\r\n * @author @elgallodev\r\n * @notice Scroll Open Hackaton - Ethernia MVP\r\n * \r\n * TO-DO List:\r\n    - Add Events\r\n    - Add Multi Will Support\r\n    - Add NFT support \r\n    - Add automatic tokens discover\r\n    - Add ZK Privacy Methods\r\n    - Add Arcana-SDK \r\n */\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract Ethernia {\r\n    \r\n    struct UserInfo {\r\n        address wallet;\r\n        uint256 lastLifeProof;\r\n        bool isTestator;\r\n    }\r\n\r\n    struct Erc20Data {\r\n        address tokenAddress;\r\n        string tokenName;\r\n        uint256 tokenBalance;\r\n    }\r\n\r\n    struct Beneficiaries {\r\n        address beneficiary;\r\n        uint256 percentage;\r\n    }\r\n\r\n    struct WillData {\r\n        string name;\r\n        uint256 creationTime;\r\n        uint256 renewPeriod;\r\n        uint256 claimTime;\r\n        uint256 executionTime;\r\n        bool isActive;\r\n        bool isClaimed;\r\n        bool isExecuted;\r\n        address claimer;\r\n        address executor;\r\n        Beneficiaries[] beneficiaryList;\r\n        Erc20Data[] erc20Tokens;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => WillData) public willData;\r\n        \r\n    uint256 public claimPeriod = 3 minutes; // Set to minutes for testing, days for production\r\n    uint256 public executionFee = 2;\r\n    address public owner;\r\n    \r\n    modifier onlyUser() {\r\n        require(userInfo[msg.sender].wallet != address(0), \"Not registered\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTestator() {\r\n        require(userInfo[msg.sender].isTestator, \"Not testator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function registerUser() external {\r\n        require(userInfo[msg.sender].wallet == address(0), \"Already registered\");\r\n        userInfo[msg.sender].wallet = msg.sender;\r\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\r\n        userInfo[msg.sender].isTestator = false;\r\n    }\r\n    \r\n    function createWill(string memory _name, uint256 _renewPeriod) external onlyUser {\r\n        require(_renewPeriod > 0, \"Invalid time period\");\r\n        willData[msg.sender].name = _name;\r\n        willData[msg.sender].creationTime = block.timestamp;\r\n        willData[msg.sender].renewPeriod = _renewPeriod * 1 minutes; // Set to minutes for testing, days for production\r\n        willData[msg.sender].isActive = true;\r\n        userInfo[msg.sender].isTestator = true;\r\n    }\r\n\r\n    function addBeneficiary(address _beneficiary, uint256 _percentage) external onlyTestator {\r\n        require(willData[msg.sender].beneficiaryList.length < 10, \"Max beneficiaries reached\");\r\n        require (_percentage > 0 && _percentage <=100, \"Percentage should be a value between 0-100\");\r\n\r\n    // CORREGIR ACUMULACION CUANDO CARGO EL MISMO USUARIO CON UN DIFERENTE PORCENTAJE, NO CAMBIA, ACUMULA\r\n        uint256 totalPercentage = 0;\r\n        for (uint256 i = 0; i < willData[msg.sender].beneficiaryList.length; i++) {\r\n            totalPercentage += willData[msg.sender].beneficiaryList[i].percentage;\r\n        }\r\n        require(totalPercentage + _percentage <= 100, \"Total percentage exceeds 100\");\r\n\r\n        Beneficiaries memory beneficiary;\r\n        beneficiary.beneficiary = _beneficiary;\r\n        beneficiary.percentage = _percentage; \r\n        willData[msg.sender].beneficiaryList.push(beneficiary);\r\n    }\r\n\r\n    function addERC20Assets (address _tokenAddress, string memory _tokenName) external onlyTestator {\r\n        require(willData[msg.sender].erc20Tokens.length < 20, \"Max tokens reached\");\r\n\r\n        // allowance must be doit in dapp token.approve(address(this), type(uint256).max)\r\n        require(IERC20(_tokenAddress).allowance(msg.sender, address(this)) == type(uint256).max, 'Must setup allowance first');\r\n        \r\n        Erc20Data memory erc20Data;\r\n        erc20Data.tokenAddress = _tokenAddress;\r\n        erc20Data.tokenName = _tokenName;\r\n        erc20Data.tokenBalance = IERC20(_tokenAddress).balanceOf(msg.sender);\r\n        willData[msg.sender].erc20Tokens.push(erc20Data);\r\n    }\r\n\r\n    function renewLifeProof () public onlyTestator {\r\n        userInfo[msg.sender].lastLifeProof = block.timestamp;\r\n    }\r\n\r\n    function claimWill (address _testatorAddress) public onlyUser {\r\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\r\n        require(willData[_testatorAddress].isClaimed == false, 'Will already claimed');\r\n        \r\n        uint256 lockPeriod;\r\n        lockPeriod = willData[_testatorAddress].renewPeriod + userInfo[_testatorAddress].lastLifeProof;\r\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\r\n        \r\n        bool isBeneficiary = false;\r\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\r\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\r\n            isBeneficiary = true;\r\n            }\r\n        }\r\n        require(isBeneficiary==true, 'You are not a beneficiary');\r\n        \r\n        willData[_testatorAddress].claimTime = block.timestamp;\r\n        willData[_testatorAddress].isClaimed = true;\r\n        willData[_testatorAddress].claimer = msg.sender;\r\n    }\r\n\r\n    function executeWill (address _testatorAddress) public onlyUser {\r\n        require(willData[_testatorAddress].isActive == true, 'Will not active');\r\n        require(willData[_testatorAddress].isClaimed == true, 'Will not claimed');\r\n        require(willData[_testatorAddress].isExecuted == false, 'Will already executed');\r\n        \r\n        uint256 lockPeriod;\r\n        lockPeriod = willData[_testatorAddress].claimTime + claimPeriod;\r\n        require(block.timestamp > lockPeriod, 'Lock period still active.');\r\n\r\n        bool isBeneficiary = false;\r\n        for (uint256 i = 0; i < willData[_testatorAddress].beneficiaryList.length; i++){\r\n            if(willData[_testatorAddress].beneficiaryList[i].beneficiary == msg.sender){\r\n            isBeneficiary = true;\r\n            }\r\n        }\r\n        require(isBeneficiary==true, 'You are not a beneficiary');\r\n\r\n        erc20Transfer(_testatorAddress);\r\n\r\n        willData[_testatorAddress].executionTime = block.timestamp;\r\n        willData[_testatorAddress].isExecuted = true;\r\n        willData[_testatorAddress].executor = msg.sender;\r\n\r\n    }\r\n\r\n    function erc20Transfer (address _testatorAddress) private {\r\n        WillData memory testament = willData[_testatorAddress];\r\n        for(uint256 i = 0; i < testament.erc20Tokens.length; i++) {\r\n            address tokenAddress = testament.erc20Tokens[i].tokenAddress;\r\n            uint256 tokenBalance = IERC20(tokenAddress).balanceOf(_testatorAddress);\r\n            uint256 tokenTransferFee = tokenBalance * executionFee / 100;\r\n            require(IERC20(tokenAddress).transferFrom(_testatorAddress, address(this), tokenTransferFee), 'Fee cannot be transfer');\r\n            tokenBalance -= tokenTransferFee;\r\n            for(uint256 j = 0; j < testament.beneficiaryList.length; j++){\r\n                uint256 tokenTransferAmount = tokenBalance * testament.beneficiaryList[j].percentage /100;\r\n                require(IERC20(tokenAddress).transferFrom(_testatorAddress, testament.beneficiaryList[j].beneficiary, tokenTransferAmount), 'Token transfer fail');\r\n            }\r\n        }\r\n    }\r\n\r\n    function listBeneficiaries (address _testatorAddress) external view returns (Beneficiaries[] memory){\r\n        return willData[_testatorAddress].beneficiaryList;\r\n    }\r\n\r\n    function listERC20Tokens (address _testatorAddress) external view returns (Erc20Data[] memory){\r\n        return willData[_testatorAddress].erc20Tokens;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}